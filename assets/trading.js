// –õ–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
class TradingPanel {
    constructor() {
        this.currentTimer = 89; // 1:29 –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        this.timerInterval = null;
        this.init();
    }

    init() {
        this.checkAuth();
        this.setupWebApp();
        this.startTimer();
        this.setupEventListeners();
    }

    checkAuth() {
        const token = localStorage.getItem('auth_token');
        if (!token) {
            window.location.href = 'login.html';
            return;
        }
    }

    setupWebApp() {
        if (window.Telegram && window.Telegram.WebApp) {
            Telegram.WebApp.ready();
            Telegram.WebApp.expand();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
            Telegram.WebApp.setHeaderColor('#1a1a2e');
            Telegram.WebApp.setBackgroundColor('#1a1a2e');
        }
    }

    startTimer() {
        this.timerInterval = setInterval(() => {
            this.currentTimer--;
            
            if (this.currentTimer <= 0) {
                this.timerComplete();
                return;
            }
            
            this.updateTimerDisplay();
        }, 1000);
    }

    updateTimerDisplay() {
        const minutes = Math.floor(this.currentTimer / 60);
        const seconds = this.currentTimer % 60;
        const timerText = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const timerElements = document.querySelectorAll('.timer');
        timerElements.forEach(element => {
            element.textContent = timerText;
        });
    }

    timerComplete() {
        clearInterval(this.timerInterval);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏
        this.showTradeResult();
    }

    async showTradeResult() {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –±–æ—Ç–∞
        try {
            const result = await this.getTradeResult();
            this.displayResult(result);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
        }
    }

    async getTradeResult() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–æ—Ç —Å–∞–º –ø—Ä–∏—à–ª–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        // –ó–¥–µ—Å—å –∏–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve({
                    success: Math.random() > 0.5,
                    profit: 18,
                    pair: 'AUDCHF',
                    exitPrice: 0.52480
                });
            }, 2000);
        });
    }

    displayResult(result) {
        const statusElement = document.querySelector('.status-message');
        if (statusElement) {
            if (result.success) {
                statusElement.innerHTML = '<span class="icon">üü¢</span> –°–î–ï–õ–ö–ê –í–´–ò–ì–†–ê–ù–ê +' + result.profit + '$';
                statusElement.style.color = '#00ff88';
            } else {
                statusElement.innerHTML = '<span class="icon">üî¥</span> –°–î–ï–õ–ö–ê –ü–†–û–ò–ì–†–ê–ù–ê';
                statusElement.style.color = '#ff4444';
            }
        }

        // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        setTimeout(() => {
            this.refreshData();
        }, 5000);
    }

    async refreshData() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        if (window.Telegram && window.Telegram.WebApp) {
            Telegram.WebApp.sendData(JSON.stringify({
                action: 'get_signal'
            }));
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        this.resetTimer();
    }

    resetTimer() {
        this.currentTimer = 120; // 2 –º–∏–Ω—É—Ç—ã
        const statusElement = document.querySelector('.status-message');
        if (statusElement) {
            statusElement.innerHTML = '<span class="icon">‚òí</span> –û–ñ–ò–î–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê';
            statusElement.style.color = '#ffffff';
        }
        this.startTimer();
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞
    handleBotMessage(data) {
        switch (data.type) {
            case 'new_signal':
                this.updateSignal(data.signal);
                break;
            case 'trade_result':
                this.displayResult(data.result);
                break;
            case 'update_stats':
                this.updateStats(data.stats);
                break;
        }
    }

    updateSignal(signal) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const pairElement = document.querySelector('.pair');
        const directionElement = document.querySelector('.direction');
        const confidenceElement = document.querySelector('.confidence');
        const priceElement = document.querySelector('.detail-item:nth-child(2) .value');

        if (pairElement) pairElement.textContent = signal.pair;
        if (directionElement) {
            directionElement.textContent = signal.direction;
            directionElement.className = `direction ${signal.direction.toLowerCase()}`;
        }
        if (confidenceElement) confidenceElement.textContent = signal.confidence;
        if (priceElement) priceElement.textContent = signal.entry_price;

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        this.resetTimer();
    }

    updateStats(stats) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const statValues = document.querySelectorAll('.stat-value');
        if (statValues[0]) statValues[0].textContent = stats.accuracy + '%';
        if (statValues[1]) statValues[1].textContent = stats.active_signals;
        // –∏ —Ç.–¥.
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
document.addEventListener('DOMContentLoaded', () => {
    window.tradingPanel = new TradingPanel();
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
window.handleTelegramUpdate = function(data) {
    if (window.tradingPanel) {
        window.tradingPanel.handleBotMessage(data);
    }
};
