import requests
import json
import os
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_API_URL = "http://89.23.98.206:8080"
FILES_TO_UPDATE = [
    'system_status.json',
    'last_signal.json', 
    'last_result.json'
]

def fetch_data_from_bot():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    try:
        print("üîÑ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞
        response = requests.get(f"{BOT_API_URL}/api/latest_full.json", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç –±–æ—Ç–∞")
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
        return None

def update_json_files(data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç JSON —Ñ–∞–π–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞"""
    if not data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return False
        
    try:
        current_time = datetime.now().isoformat()
        
        # system_status.json
        system_data = {
            "win_rate": data.get('system', {}).get('win_rate', 75.5),
            "active_signals": data.get('system', {}).get('active_signals', 1),
            "status": data.get('system', {}).get('status', "LIVE"),
            "total_trades": data.get('system', {}).get('total_trades', 1250),
            "total_wins": data.get('system', {}).get('total_wins', 945),
            "total_losses": data.get('system', {}).get('total_losses', 305),
            "last_updated": current_time
        }
        
        with open('system_status.json', 'w', encoding='utf-8') as f:
            json.dump(system_data, f, indent=2, ensure_ascii=False)
        print("‚úÖ system_status.json –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # last_signal.json
        signal_data = data.get('signal', {})
        if signal_data and not signal_data.get('error'):
            signal_data['last_updated'] = current_time
            with open('last_signal.json', 'w', encoding='utf-8') as f:
                json.dump(signal_data, f, indent=2, ensure_ascii=False)
            print("‚úÖ last_signal.json –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π
            empty_signal = {
                "error": "No active signal",
                "last_updated": current_time
            }
            with open('last_signal.json', 'w', encoding='utf-8') as f:
                json.dump(empty_signal, f, indent=2, ensure_ascii=False)
            print("‚ö†Ô∏è last_signal.json - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞")
            
        # last_result.json  
        result_data = data.get('result', {})
        if result_data and not result_data.get('error'):
            result_data['last_updated'] = current_time
            with open('last_result.json', 'w', encoding='utf-8') as f:
                json.dump(result_data, f, indent=2, ensure_ascii=False)
            print("‚úÖ last_result.json –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π
            empty_result = {
                "error": "No recent results", 
                "last_updated": current_time
            }
            with open('last_result.json', 'w', encoding='utf-8') as f:
                json.dump(empty_result, f, indent=2, ensure_ascii=False)
            print("‚ö†Ô∏è last_result.json - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
        return False

def create_fallback_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    current_time = datetime.now().isoformat()
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        fallback_system = {
            "win_rate": 78.2,
            "active_signals": 1,
            "status": "DEMO",
            "total_trades": 1251,
            "total_wins": 978,
            "total_losses": 273,
            "last_updated": current_time
        }
        
        fallback_signal = {
            "pair": "EURUSD",
            "direction": "BUY", 
            "confidence": 8,
            "entry_price": 1.07423,
            "expiry": 2,
            "source": "ENHANCED_SMART_MONEY",
            "trade_id": 1251,
            "last_updated": current_time
        }
        
        fallback_result = {
            "pair": "GBPJPY",
            "direction": "SELL",
            "result": "WIN", 
            "entry_price": 185.567,
            "exit_price": 185.423,
            "last_updated": current_time
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º fallback –¥–∞–Ω–Ω—ã–µ
        with open('system_status.json', 'w', encoding='utf-8') as f:
            json.dump(fallback_system, f, indent=2, ensure_ascii=False)
        with open('last_signal.json', 'w', encoding='utf-8') as f:
            json.dump(fallback_signal, f, indent=2, ensure_ascii=False) 
        with open('last_result.json', 'w', encoding='utf-8') as f:
            json.dump(fallback_result, f, indent=2, ensure_ascii=False)
            
        print("‚úÖ Fallback –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É: {BOT_API_URL}")
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞
    bot_data = fetch_data_from_bot()
    
    if bot_data:
        print("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞...")
        success = update_json_files(bot_data)
        if not success:
            print("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ fallback –¥–∞–Ω–Ω—ã–µ...")
            create_fallback_data()
    else:
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("üîÑ –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        create_fallback_data()
        
    print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
